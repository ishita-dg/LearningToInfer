d = data.frame(exp = d0$sub_exp,
corr = d0$..1
)
p <- ggplot(d, aes(exp, corr)) + geom_col() + ylim(c(-0.2, 1.8))
p
exclude = d$exp[d$corr < 0.0]
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_logodds(data)
p
plot_logodds <- function(data){
data$tl_bins = .bincode(true_los, quantile(true_los, probs = seq(0.0, 1.0, 10)))
d_summary = ddply(data,.(tl_bins, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
p <- ggplot(d_summary, aes(x = mean_true_los, y = mean_model_los, col = sub_exp)) +
geom_point() + xlim(c(-11, 16)) + ylim(c(-4, 4))+
geom_smooth(aes(x = mean_true_los, y = mean_model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = mean_true_los, y = mean_model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_logodds(data)
plot_logodds <- function(data){
data$tl_bins = .bincode(data$true_los, quantile(data$true_los, probs = seq(0.0, 1.0, 10)))
d_summary = ddply(data,.(tl_bins, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
p <- ggplot(d_summary, aes(x = mean_true_los, y = mean_model_los, col = sub_exp)) +
geom_point() + xlim(c(-11, 16)) + ylim(c(-4, 4))+
geom_smooth(aes(x = mean_true_los, y = mean_model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = mean_true_los, y = mean_model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_logodds(data)
p
plot_logodds <- function(data){
data$tl_bins = .bincode(data$true_los, quantile(data$true_los, probs = seq(0.0, 1.0, 40)))
d_summary = ddply(data,.(tl_bins, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
p <- ggplot(d_summary, aes(x = mean_true_los, y = mean_model_los, col = sub_exp)) +
geom_point() + xlim(c(-11, 16)) + ylim(c(-4, 4))+
geom_smooth(aes(x = mean_true_los, y = mean_model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = mean_true_los, y = mean_model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
plot_diag <- function(data){
# diagnosticity
data$theta_bins = .bincode(data$thetas, breaks = seq(0, max(data$thetas), 0.1))
d_summary = ddply(data,.(theta_bins, sub_exp), summarise, get_AR(model_los, lik_los))
ds = data.frame(thetas = d_summary$theta_bins*0.1,
exp = d_summary$sub_exp,
ARs = d_summary$..1
)
ds = unique(ds)
p <- ggplot(ds, aes(x = thetas, y = ARs, col = exp)) +
geom_point() + xlim(c(0.1, 0.9)) + ylim(c(-0.5, 1.6)) + #geom_smooth(method = 'loess') +
stat_smooth(mapping = aes(x = thetas, y = ARs), method = 'lm', inherit.aes = FALSE, col = 'black')
# geom_abline(intercept = 1.0, slope = 0.0, col = 'red')
return(p)
}
fn = "BiasFalse__N_part419__expt_nameBenj__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
fn = "BiasFalse__N_part419__expt_nameBenj__NHID5__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
data = get_data(fn)
d0 = ddply(data,.(sub_exp), summarise, get_corr(true_los, model_los))
d = data.frame(exp = d0$sub_exp,
corr = d0$..1
)
p <- ggplot(d, aes(exp, corr)) + geom_col() + ylim(c(-0.2, 1.8))
p
exclude = d$exp[d$corr < 0.0]
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_logodds(data)
p
p = plot_ss(data)
p
p = plot_logodds(data)
p
data$tl_bins = .bincode(data$true_los, quantile(data$true_los, probs = seq(0.0, 1.0, 40)))
d_summary = ddply(data,.(tl_bins, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
d_summary
data$tl_bins
seq(0.0, 1.0, 10)
plot_logodds <- function(data){
data$tl_bins = .bincode(data$true_los, quantile(data$true_los, probs = seq(0.0, 1.0, 0.1)))
d_summary = ddply(data,.(tl_bins, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
p <- ggplot(d_summary, aes(x = mean_true_los, y = mean_model_los, col = sub_exp)) +
geom_point() + xlim(c(-11, 16)) + ylim(c(-4, 4))+
geom_smooth(aes(x = mean_true_los, y = mean_model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = mean_true_los, y = mean_model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_logodds(data)
p
plot_logodds <- function(data){
data$tl_bins = .bincode(data$true_los, quantile(data$true_los, probs = seq(0.0, 1.0, 0.05)))
d_summary = ddply(data,.(tl_bins, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
p <- ggplot(d_summary, aes(x = mean_true_los, y = mean_model_los, col = sub_exp)) +
geom_point() + xlim(c(-11, 16)) + ylim(c(-4, 4))+
geom_smooth(aes(x = mean_true_los, y = mean_model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = mean_true_los, y = mean_model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
plot_diag <- function(data){
# diagnosticity
data$theta_bins = .bincode(data$thetas, breaks = seq(0, max(data$thetas), 0.1))
d_summary = ddply(data,.(theta_bins, sub_exp), summarise, get_AR(model_los, lik_los))
ds = data.frame(thetas = d_summary$theta_bins*0.1,
exp = d_summary$sub_exp,
ARs = d_summary$..1
)
ds = unique(ds)
p <- ggplot(ds, aes(x = thetas, y = ARs, col = exp)) +
geom_point() + xlim(c(0.1, 0.9)) + ylim(c(-0.5, 1.6)) + #geom_smooth(method = 'loess') +
stat_smooth(mapping = aes(x = thetas, y = ARs), method = 'lm', inherit.aes = FALSE, col = 'black')
# geom_abline(intercept = 1.0, slope = 0.0, col = 'red')
return(p)
}
fn = "BiasFalse__N_part419__expt_nameBenj__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
fn = "BiasFalse__N_part419__expt_nameBenj__NHID5__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
data = get_data(fn)
d0 = ddply(data,.(sub_exp), summarise, get_corr(true_los, model_los))
d = data.frame(exp = d0$sub_exp,
corr = d0$..1
)
p <- ggplot(d, aes(exp, corr)) + geom_col() + ylim(c(-0.2, 1.8))
p
exclude = d$exp[d$corr < 0.0]
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_logodds(data)
p
p = plot_ss(data)
p
plot_logodds <- function(data){
data$tl_bins = .bincode(data$true_los, quantile(data$true_los, probs = seq(0.0, 1.0, 0.05)))
d_summary = ddply(data,.(tl_bins, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
p <- ggplot(d_summary, aes(x = mean_true_los, y = mean_model_los, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = mean_true_los, y = mean_model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = mean_true_los, y = mean_model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_logodds(data)
p
plot_logodds <- function(data){
# data$tl_bins = .bincode(data$true_los, quantile(data$true_los, probs = seq(0.0, 1.0, 0.05)))
d_summary = ddply(data,.(true_los, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
p <- ggplot(d_summary, aes(x = mean_true_los, y = mean_model_los, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = mean_true_los, y = mean_model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = mean_true_los, y = mean_model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
plot_diag <- function(data){
# diagnosticity
data$theta_bins = .bincode(data$thetas, breaks = seq(0, max(data$thetas), 0.1))
d_summary = ddply(data,.(theta_bins, sub_exp), summarise, get_AR(model_los, lik_los))
ds = data.frame(thetas = d_summary$theta_bins*0.1,
exp = d_summary$sub_exp,
ARs = d_summary$..1
)
ds = unique(ds)
p <- ggplot(ds, aes(x = thetas, y = ARs, col = exp)) +
geom_point() + xlim(c(0.1, 0.9)) + ylim(c(-0.5, 1.6)) + #geom_smooth(method = 'loess') +
stat_smooth(mapping = aes(x = thetas, y = ARs), method = 'lm', inherit.aes = FALSE, col = 'black')
# geom_abline(intercept = 1.0, slope = 0.0, col = 'red')
return(p)
}
fn = "BiasFalse__N_part419__expt_nameBenj__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
fn = "BiasFalse__N_part419__expt_nameBenj__NHID5__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
data = get_data(fn)
d0 = ddply(data,.(sub_exp), summarise, get_corr(true_los, model_los))
d = data.frame(exp = d0$sub_exp,
corr = d0$..1
)
p <- ggplot(d, aes(exp, corr)) + geom_col() + ylim(c(-0.2, 1.8))
p
exclude = d$exp[d$corr < 0.0]
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_logodds(data)
p
p = plot_raw_logodds(data)
p
plot_raw_logodds <- function(data){
p <- ggplot(d_summary, aes(x = true_los, y = model_los, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_raw_logodds(data)
p
plot_raw_logodds <- function(data){
p <- ggplot(data, aes(x = true_los, y = model_los, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
library(jsonlite)
library(ggplot2)
require(gridExtra)
require(plyr)
setwd("~/GitHub/LearningToInfer/data")
log_odds <- function(x){
return(log(x/(1.0 - x)))
}
to_theta <- function(x) {
return(x/(1.0 + x))
}
get_AR <- function(model_los, lik_los){
summary = summary(lm(model_los ~ lik_los + 0, na.action=na.exclude))$coefficients
if (length(summary) < 4){
AR = NA
}else{
AR = summary[1,1]
}
return(AR)
}
get_corr<- function(tl, ml){
m = lm(tl ~ ml + 0)
s = summary(m)$coefficients
return(s[1,1])
}
get_data <- function(fn){
data0 <- fromJSON(txt=fn)
data = data.frame(prior_los = log_odds(data0$priors),
true_los = log_odds(data0$hrms),
model_los = log_odds(data0$ams),
Ns = data0$weights*33,
sub_exp = data0$sub_exp,
thetas = to_theta(data0$lik_ratios)
)
data$lik_los = data$true_los - data$prior_los
data$lik_los[which(!is.finite(data$lik_los))] = NA
data$lik_los[is.nan(data$lik_los)] = NA
data$model_los[which(!is.finite(data$model_los))] = NA
data$model_los[is.nan(data$model_los)] = NA
return(data)
}
plot_ss <- function(data){
# Ns
# data$random_reassign = sample(c(1, 2, 3), replace = TRUE, size = length(data$Ns))
d_summary = ddply(data,.(Ns, sub_exp), summarise, get_AR(model_los, lik_los))
ds = data.frame(Ns = d_summary$Ns,
exp = d_summary$sub_exp,
ARs = d_summary$..1
)
ds = unique(ds)
p <- ggplot(ds, aes(x = Ns, y = ARs, col = exp)) +
geom_point() + xlim(c(-1, 40)) + ylim(c(-0.2, 1.6)) + #geom_smooth(method = 'loess') +
stat_smooth(mapping = aes(x = Ns, y = ARs), method = 'lm', inherit.aes = FALSE, col = 'black')
# geom_abline(intercept = 1.0, slope = 0.0, col = 'red')
return(p)
}
plot_raw_logodds <- function(data){
p <- ggplot(data, aes(x = true_los, y = model_los, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
plot_logodds <- function(data){
# data$tl_bins = .bincode(data$true_los, quantile(data$true_los, probs = seq(0.0, 1.0, 0.05)))
d_summary = ddply(data,.(true_los, sub_exp), summarise, mean_model_los = mean(model_los), mean_true_los = mean(true_los))
p <- ggplot(d_summary, aes(x = mean_true_los, y = mean_model_los, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = mean_true_los, y = mean_model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = mean_true_los, y = mean_model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
plot_diag <- function(data){
# diagnosticity
data$theta_bins = .bincode(data$thetas, breaks = seq(0, max(data$thetas), 0.1))
d_summary = ddply(data,.(theta_bins, sub_exp), summarise, get_AR(model_los, lik_los))
ds = data.frame(thetas = d_summary$theta_bins*0.1,
exp = d_summary$sub_exp,
ARs = d_summary$..1
)
ds = unique(ds)
p <- ggplot(ds, aes(x = thetas, y = ARs, col = exp)) +
geom_point() + xlim(c(0.1, 0.9)) + ylim(c(-0.5, 1.6)) + #geom_smooth(method = 'loess') +
stat_smooth(mapping = aes(x = thetas, y = ARs), method = 'lm', inherit.aes = FALSE, col = 'black')
# geom_abline(intercept = 1.0, slope = 0.0, col = 'red')
return(p)
}
#***************************
fn = "BiasFalse__N_part419__expt_nameBenj__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
# fn = "BiasFalse__N_part419__expt_nameBenj__NHID5__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
# fn = "BiasFalse__N_part49__expt_nameBenj__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch300__train_lr0.01__plot_data"
data = get_data(fn)
d0 = ddply(data,.(sub_exp), summarise, get_corr(true_los, model_los))
d = data.frame(exp = d0$sub_exp,
corr = d0$..1
)
p <- ggplot(d, aes(exp, corr)) + geom_col() + ylim(c(-0.2, 1.8))
p
# ggsave(file = "corrs_NHID1.png", p)
exclude = d$exp[d$corr < 0.0]
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_raw_logodds(data)
p
p = plot_logodds(data)
p
# ggsave(file = "logodds_NHID1.png", p)
p = plot_ss(data)
p
# ggsave(file = "samplesize_NHID1.png", p)
p = plot_diag(data)
p
# ggsave(file = "diagnosticity_NHID1.png", p)
x = subset(data, sub_exp == 'PSM65')
plot_raw_logodds(x)
x = subset(data, sub_exp == 'MC72')
plot_raw_logodds(x)
plot_raw_logodds <- function(data){
p <- ggplot(data, aes(x = true_los, y = model_los, group = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p <- ggplot(data, aes(x = true_los, y = model_los, group = sub_exp)) +
geom_point(shape = sub_exp) + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
plot_raw_logodds <- function(data){
p <- ggplot(data, aes(x = true_los, y = model_los, group = sub_exp)) +
geom_point(shape = sub_exp) + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
plot_raw_logodds(data)
plot_raw_logodds <- function(data){
p <- ggplot(data, aes(x = true_los, y = model_los, shape = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
plot_raw_logodds(data)
plot_raw_logodds <- function(data){
p <- ggplot(data, aes(x = true_los, y = model_los, shape = sub_exp, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
plot_raw_logodds(data)
data$sub_exp[:30]
data$sub_exp[1:30]
data$sub_exp[1:30]
data$sub_exp[1:300]
?rep
length(data$sub_exp)
length(data$sub_exp)/1400
fn = "BiasFalse__N_part419__expt_nameBenj__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
data = get_data(fn)
d0 = ddply(data,.(sub_exp), summarise, get_corr(true_los, model_los))
d = data.frame(exp = d0$sub_exp,
corr = d0$..1
)
p <- ggplot(d, aes(exp, corr)) + geom_col() + ylim(c(-0.2, 1.8))
p
length(data$sub_exp)/1400
plot_raw_logodds <- function(data){
N = length(data$sub_exp)/1400
data$shapes <- c(rep(c(1, 2, 3, 4, 6, 1), each = 200), N)
p <- ggplot(data, aes(x = true_los, y = model_los, shape = shape, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_raw_logodds(data)
plot_raw_logodds <- function(data){
N = length(data$sub_exp)/1400
data$shapes <- c(rep(c(1, 2, 3, 4, 6, 1), each = 200), N)
p <- ggplot(data, aes(x = true_los, y = model_los, shape = shapes, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_raw_logodds(data)
N = length(data$sub_exp)/1400
data$shapes <- c(rep(c(1, 2, 3, 4, 6, 1), each = 200), N)
N
plot_raw_logodds <- function(data){
N = length(data$sub_exp)/1400
data$shapes <- c(rep(c(1, 2, 3, 4, 6, 1, 2), each = 200), N)
p <- ggplot(data, aes(x = true_los, y = model_los, shape = shapes, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_raw_logodds(data)
N = length(data$sub_exp)/1400
length(c(rep(c(1, 2, 3, 4, 6, 1, 2), each = 200), N))
length(data$sub_exp)
data$shapes <- rep(c(rep(c(1, 2, 3, 4, 6, 1, 2), each = 200)), N)
length(c(rep(c(1, 2, 3, 4, 6, 1, 2), each = 200), N))
length(rep(c(rep(c(1, 2, 3, 4, 6, 1, 2), each = 200)), N))
plot_raw_logodds <- function(data){
N = length(data$sub_exp)/1400
data$shapes <- rep(c(rep(c(1, 2, 3, 4, 6, 1, 2), each = 200)), N)
p <- ggplot(data, aes(x = true_los, y = model_los, shape = shapes, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_raw_logodds(data)
p
plot_raw_logodds <- function(data){
N = length(data$sub_exp)/1400
data$shapes <- rep(c(rep(c(1, 2, 3, 4, 6, 1, 2), each = 200)), N)
p <- ggplot(data, aes(x = true_los, y = model_los, shape = factor(shapes), col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_raw_logodds(data)
p
exclude = c('PSM65', 'MC72')
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_raw_logodds(data)
plot_raw_logodds <- function(data){
# N = length(data$sub_exp)/1400
# data$shapes <- rep(c(rep(c(1, 2, 3, 4, 6, 1, 2), each = 200)), N)
p <- ggplot(data, aes(x = true_los, y = model_los, col = sub_exp)) +
geom_point() + xlim(c(-10, 10)) + ylim(c(-4, 4))+
geom_smooth(aes(x = true_los, y = model_los), method = 'loess', inherit.aes = FALSE, col = 'black') +
stat_smooth(mapping = aes(x = true_los, y = model_los), method = 'lm', inherit.aes = FALSE, col = 'black') +
geom_abline(intercept = 0.0, slope = 1.0, col = 'black')
return(p)
}
p = plot_raw_logodds(data)
p
exclude = c('PSM65', 'MC72', 'BWB70', 'GHR65')
p = plot_logodds(data)
p
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_raw_logodds(data)
p
fn = "N_part419__expt_nameBenj__NHID1__NONLINrbf__noise_blocks10__L20.0__test_epoch0__test_lr0.0__train_epoch30__train_lr0.01__plot_data"
data = get_data(fn)
d0 = ddply(data,.(sub_exp), summarise, get_corr(true_los, model_los))
d = data.frame(exp = d0$sub_exp,
corr = d0$..1
)
p <- ggplot(d, aes(exp, corr)) + geom_col() + ylim(c(-0.2, 1.8))
p
exclude = c('KW04-1')
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_raw_logodds(data)
p
exclude = c('PSM65', 'MC72', 'BWB70', 'GHR65')
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_raw_logodds(data)
p
exclude = c('PSM65', 'MC72', 'BWB70', 'GHR65', 'DD74')
for (exp in exclude){
print(exp)
data = subset(data, sub_exp != exp)
}
p = plot_raw_logodds(data)
p
