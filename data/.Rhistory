geom_point(position =pd)+
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p1
p8<-ggplot(dp, aes(x=group, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=0.8, position=pd) +
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_line(position=pd, size=1) +
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p8
library(rjson)
library(plyr)
library(ggplot2)
# library(dplyr)
find_AR <- function(r_update, s_update, prior){
b_post <- prior + r_update
s_post <- prior + s_update
B_post_odds = log(b_post/(1.0 - b_post))
S_post_odds = log(s_post/(1.0 - s_post))
BLLR = B_post_odds - log(prior/(1.0 - prior))
SLLR = S_post_odds - log(prior/(1.0 - prior))
if (SLLR == BLLR) {
return(1.0)}
else{
return(SLLR/BLLR)
}
}
se<-function(x){sd(x)/sqrt(length(x))}
pd <- position_dodge(0.01)
cbbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dm<-data.frame(Condition=numeric(), rational=numeric(), people=numeric(), accuracy_ratio=numeric(), prior=numeric())
for (type in c('val', 'test')){
for (m in c(6601:6700)){
modeljson<-fromJSON(file = paste0("part",m,"_", type, "preds_disc_epoch30_sg0_f1.01.0_Nb100_Nt1.json"))
rational<--round(c(modeljson$inf_rm_update[0:10],modeljson$uninf_rm_update[0:10]), digits = 2)
people<--round(c(modeljson$inf_am_update[0:10],modeljson$uninf_am_update[0:10]), digits = 2)
prior<-1.0 - c(modeljson$inf_prior[0:10],modeljson$uninf_prior[0:10])
condition<-rep(c("Informative Prior", "Informative Lik"), each=10)
accuracy_ratio<-find_AR(rational, people, prior)
dummy<-data.frame(Condition=condition, rational=rational, people=people, prior=prior, accuracy_ratio = accuracy_ratio)
dm<-rbind(dm, dummy)
}
}
dm <- dm[dm$rational != 0.00,]
# dm$accuracy_ratio[dm$accuracy_ratio < 0.0] <- 0
# dm$accuracy_ratio[dm$accuracy_ratio > 20] <- 0
dm <- within(dm, group <- as.integer(cut(prior, breaks = seq(0.0,0.9, by = 0.1), include.lowest=TRUE)))
dp<-ddply(dm, ~Condition+group, summarize,
mu=mean(na.omit(accuracy_ratio)),
se=1.96*se(na.omit(accuracy_ratio)))
# dp$group<-mapvalues(dp$group, from=1:10, to=seq(from = 0, to = 0.9, by = 0.1))
# dm <- within(dm, group <- as.integer(cut(rational, quantile(rational, probs=0:4/4), include.lowest=TRUE)))
# dp<-ddply(dm, ~Condition+group, summarize, mu=mean(people), se=1.96*se(people))
# dp$group<-mapvalues(dp$group, from=1:4, to=c(0.08,0.25,0.4,0.89))
p1<-ggplot(dm, aes(x=prior, y=accuracy_ratio, col=Condition)) +
geom_point(position =pd)+
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p1
p8<-ggplot(dp, aes(x=group, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=0.8, position=pd) +
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_line(position=pd, size=1) +
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p8
hist(dm$prior)
hist(dm$rational)
hist(dm$people)
hist(dm$people)
hist(dm$rational)
lik = sample(dm$prior)
lik
post = (lik*dm$prior)/(lik*dm$prior + (1.0 - lik)*(1.0 - dm$prior))
hist(post)
post
hist(post, bins = 10)
?hist
hist(post, breaks = 10)
hist(post - prior, breaks = 10)
hist(post - lik, breaks = 10)
hist(rational, breaks = 10)
hist(post - lik, breaks = 10)
hist(dm$rational, breaks = 10)
library(rjson)
library(plyr)
library(ggplot2)
# library(dplyr)
find_AR <- function(r_update, s_update, prior){
b_post <- prior + r_update
s_post <- prior + s_update
B_post_odds = log(b_post/(1.0 - b_post))
S_post_odds = log(s_post/(1.0 - s_post))
BLLR = B_post_odds - log(prior/(1.0 - prior))
SLLR = S_post_odds - log(prior/(1.0 - prior))
if (SLLR == BLLR) {
return(1.0)}
else{
return(SLLR/BLLR)
}
}
se<-function(x){sd(x)/sqrt(length(x))}
pd <- position_dodge(0.01)
cbbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dm<-data.frame(Condition=numeric(), rational=numeric(), people=numeric(), accuracy_ratio=numeric(), prior=numeric())
for (type in c('val', 'test')){
for (m in c(6601:6700)){
modeljson<-fromJSON(file = paste0("part",m,"_", type, "preds_disc_epoch30_sg0_f1.01.0_Nb100_Nt1.json"))
rational<--round(c(modeljson$inf_rm_update[0:10],modeljson$uninf_rm_update[0:10]), digits = 2)
people<--round(c(modeljson$inf_am_update[0:10],modeljson$uninf_am_update[0:10]), digits = 2)
prior<-c(modeljson$inf_prior[0:10],modeljson$uninf_prior[0:10])
condition<-rep(c("Informative Prior", "Informative Lik"), each=10)
accuracy_ratio<-find_AR(rational, people, prior)
dummy<-data.frame(Condition=condition, rational=rational, people=people, prior=prior, accuracy_ratio = accuracy_ratio)
dm<-rbind(dm, dummy)
}
}
dm <- dm[dm$rational != 0.00,]
# dm$accuracy_ratio[dm$accuracy_ratio < 0.0] <- 0
# dm$accuracy_ratio[dm$accuracy_ratio > 20] <- 0
dm <- within(dm, group <- as.integer(cut(prior, breaks = seq(0.0,0.9, by = 0.1), include.lowest=TRUE)))
dp<-ddply(dm, ~Condition+group, summarize,
mu=mean(na.omit(accuracy_ratio)),
se=1.96*se(na.omit(accuracy_ratio)))
# dp$group<-mapvalues(dp$group, from=1:10, to=seq(from = 0, to = 0.9, by = 0.1))
# dm <- within(dm, group <- as.integer(cut(rational, quantile(rational, probs=0:4/4), include.lowest=TRUE)))
# dp<-ddply(dm, ~Condition+group, summarize, mu=mean(people), se=1.96*se(people))
# dp$group<-mapvalues(dp$group, from=1:4, to=c(0.08,0.25,0.4,0.89))
p1<-ggplot(dm, aes(x=prior, y=accuracy_ratio, col=Condition)) +
geom_point(position =pd)+
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p1
p8<-ggplot(dp, aes(x=group, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=0.8, position=pd) +
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_line(position=pd, size=1) +
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p8
library(rjson)
library(plyr)
library(ggplot2)
# library(dplyr)
find_AR <- function(r_update, s_update, prior){
b_post <- prior + r_update
s_post <- prior + s_update
B_post_odds = log(b_post/(1.0 - b_post))
S_post_odds = log(s_post/(1.0 - s_post))
BLLR = B_post_odds - log(prior/(1.0 - prior))
SLLR = S_post_odds - log(prior/(1.0 - prior))
if (SLLR == BLLR) {
return(1.0)}
else{
return(SLLR/BLLR)
}
}
se<-function(x){sd(x)/sqrt(length(x))}
pd <- position_dodge(0.01)
cbbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dm<-data.frame(Condition=numeric(), rational=numeric(), people=numeric(), accuracy_ratio=numeric(), prior=numeric())
for (type in c('val', 'test')){
for (m in c(6601:6700)){
modeljson<-fromJSON(file = paste0("part",m,"_", type, "preds_disc_epoch30_sg0_f1.01.0_Nb100_Nt1.json"))
rational<-round(c(modeljson$inf_rm_update[0:10],modeljson$uninf_rm_update[0:10]), digits = 2)
people<-round(c(modeljson$inf_am_update[0:10],modeljson$uninf_am_update[0:10]), digits = 2)
prior<-c(modeljson$inf_prior[0:10],modeljson$uninf_prior[0:10])
condition<-rep(c("Informative Prior", "Informative Lik"), each=10)
accuracy_ratio<-find_AR(rational, people, prior)
dummy<-data.frame(Condition=condition, rational=rational, people=people, prior=prior, accuracy_ratio = accuracy_ratio)
dm<-rbind(dm, dummy)
}
}
dm <- dm[dm$rational != 0.00,]
# dm$accuracy_ratio[dm$accuracy_ratio < 0.0] <- 0
# dm$accuracy_ratio[dm$accuracy_ratio > 20] <- 0
dm <- within(dm, group <- as.integer(cut(prior, breaks = seq(0.0,0.9, by = 0.1), include.lowest=TRUE)))
dp<-ddply(dm, ~Condition+group, summarize,
mu=mean(na.omit(accuracy_ratio)),
se=1.96*se(na.omit(accuracy_ratio)))
# dp$group<-mapvalues(dp$group, from=1:10, to=seq(from = 0, to = 0.9, by = 0.1))
# dm <- within(dm, group <- as.integer(cut(rational, quantile(rational, probs=0:4/4), include.lowest=TRUE)))
# dp<-ddply(dm, ~Condition+group, summarize, mu=mean(people), se=1.96*se(people))
# dp$group<-mapvalues(dp$group, from=1:4, to=c(0.08,0.25,0.4,0.89))
p1<-ggplot(dm, aes(x=prior, y=accuracy_ratio, col=Condition)) +
geom_point(position =pd)+
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p1
p8<-ggplot(dp, aes(x=group, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=0.8, position=pd) +
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_line(position=pd, size=1) +
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p8
hist(post - lik, breaks = 10)
hist(dm$rational, breaks = 10)
hist(dm$rational, breaks = 10)
hist(dm$people, breaks = 10)
hist(dm$rational, breaks = 10)
library(rjson)
library(plyr)
library(ggplot2)
# library(dplyr)
find_AR <- function(r_update, s_update, prior){
b_post <- prior + r_update
s_post <- prior + s_update
B_post_odds = log(b_post/(1.0 - b_post))
S_post_odds = log(s_post/(1.0 - s_post))
BLLR = B_post_odds - log(prior/(1.0 - prior))
SLLR = S_post_odds - log(prior/(1.0 - prior))
if (SLLR == BLLR) {
return(1.0)}
else{
return(SLLR/BLLR)
}
}
se<-function(x){sd(x)/sqrt(length(x))}
pd <- position_dodge(0.01)
cbbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dm<-data.frame(Condition=numeric(), rational=numeric(), people=numeric(), accuracy_ratio=numeric(), prior=numeric())
for (type in c('val', 'test')){
for (m in c(1000)){
modeljson<-fromJSON(file = paste0("part",m,"_", type, "preds_disc_epoch30_sg0_f1.01.0_Nb1000_Nt1.json"))
rational<-round(c(modeljson$inf_rm_update[0:10],modeljson$uninf_rm_update[0:10]), digits = 2)
people<-round(c(modeljson$inf_am_update[0:10],modeljson$uninf_am_update[0:10]), digits = 2)
prior<-c(modeljson$inf_prior[0:10],modeljson$uninf_prior[0:10])
condition<-rep(c("Informative Prior", "Informative Lik"), each=10)
accuracy_ratio<-find_AR(rational, people, prior)
dummy<-data.frame(Condition=condition, rational=rational, people=people, prior=prior, accuracy_ratio = accuracy_ratio)
dm<-rbind(dm, dummy)
}
}
dm <- dm[dm$rational != 0.00,]
# dm$accuracy_ratio[dm$accuracy_ratio < 0.0] <- 0
# dm$accuracy_ratio[dm$accuracy_ratio > 20] <- 0
dm <- within(dm, group <- as.integer(cut(prior, breaks = seq(0.0,0.9, by = 0.1), include.lowest=TRUE)))
dp<-ddply(dm, ~Condition+group, summarize,
mu=mean(na.omit(accuracy_ratio)),
se=1.96*se(na.omit(accuracy_ratio)))
# dp$group<-mapvalues(dp$group, from=1:10, to=seq(from = 0, to = 0.9, by = 0.1))
# dm <- within(dm, group <- as.integer(cut(rational, quantile(rational, probs=0:4/4), include.lowest=TRUE)))
# dp<-ddply(dm, ~Condition+group, summarize, mu=mean(people), se=1.96*se(people))
# dp$group<-mapvalues(dp$group, from=1:4, to=c(0.08,0.25,0.4,0.89))
p1<-ggplot(dm, aes(x=prior, y=accuracy_ratio, col=Condition)) +
geom_point(position =pd)+
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p1
p8<-ggplot(dp, aes(x=group, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=0.8, position=pd) +
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_line(position=pd, size=1) +
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p8
library(rjson)
library(plyr)
library(ggplot2)
# library(dplyr)
find_AR <- function(r_update, s_update, prior){
b_post <- prior + r_update
s_post <- prior + s_update
B_post_odds = log(b_post/(1.0 - b_post))
S_post_odds = log(s_post/(1.0 - s_post))
BLLR = B_post_odds - log(prior/(1.0 - prior))
SLLR = S_post_odds - log(prior/(1.0 - prior))
if (SLLR == BLLR) {
return(1.0)}
else{
return(SLLR/BLLR)
}
}
se<-function(x){sd(x)/sqrt(length(x))}
pd <- position_dodge(0.01)
cbbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dm<-data.frame(Condition=numeric(), rational=numeric(), people=numeric(), accuracy_ratio=numeric(), prior=numeric())
for (type in c('val', 'test')){
for (m in c(1000)){
modeljson<-fromJSON(file = paste0("part",m,"_", type, "preds_disc_epoch30_sg0_f1.01.0_Nb1000_Nt1.json"))
rational<-round(c(modeljson$inf_rm_update[0:10],modeljson$uninf_rm_update[0:10]), digits = 2)
people<-round(c(modeljson$inf_am_update[0:10],modeljson$uninf_am_update[0:10]), digits = 2)
prior<-c(modeljson$inf_prior[0:10],modeljson$uninf_prior[0:10])
condition<-rep(c("Informative Prior", "Informative Lik"), each=10)
accuracy_ratio<-find_AR(rational, people, prior)
dummy<-data.frame(Condition=condition, rational=rational, people=people, prior=prior, accuracy_ratio = accuracy_ratio)
dm<-rbind(dm, dummy)
}
}
dm <- dm[dm$rational != 0.00,]
# dm$accuracy_ratio[dm$accuracy_ratio < 0.0] <- 0
# dm$accuracy_ratio[dm$accuracy_ratio > 20] <- 0
dm <- within(dm, group <- as.integer(cut(prior, breaks = seq(0.0,0.9, by = 0.1), include.lowest=TRUE)))
dp<-ddply(dm, ~Condition+group, summarize,
mu=mean(na.omit(accuracy_ratio)),
se=1.96*se(na.omit(accuracy_ratio)))
# dp$group<-mapvalues(dp$group, from=1:10, to=seq(from = 0, to = 0.9, by = 0.1))
# dm <- within(dm, group <- as.integer(cut(rational, quantile(rational, probs=0:4/4), include.lowest=TRUE)))
# dp<-ddply(dm, ~Condition+group, summarize, mu=mean(people), se=1.96*se(people))
# dp$group<-mapvalues(dp$group, from=1:4, to=c(0.08,0.25,0.4,0.89))
p1<-ggplot(dm, aes(x=prior, y=accuracy_ratio, col=Condition)) +
geom_point(position =pd)+
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p1
p8<-ggplot(dp, aes(x=group, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=0.8, position=pd) +
#scale_color_manual(values=c("#F0E442", "#E69F00", "#009E73", "#56B4E9"))+
#lines
geom_line(position=pd, size=1) +
geom_hline(yintercept=1.0) +
scale_color_manual(values = cbbPalette[c(6,7)])+
#classic theme, legend on bottom
theme_classic()+theme(text = element_text(size=12,  family="serif"),
strip.background=element_blank(),
legend.position="top")+
# scale_x_continuous(breaks = round(seq(min(0), max(1), by = 0.1),1)) +
#ylim(c(0,0.35))+
ylab(expression(Delta~"Model"))+xlab(expression(Delta~"Rational"))+
#change theme
theme(text = element_text(size=24, family="sans"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title =  element_blank())+ggtitle("Model updates")
p8
