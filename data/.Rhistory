theme_classic() +xlab("Condition")+ylab("Mean Estimates")+
ggtitle(title)+
scale_y_continuous(limits = c(0,1), expand = c(0, 0)) +
#adjust text size
theme(text = element_text(size=18, family="serif"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=2))
return(p1)
}
fn = "N_part19__expt_nameGTstudy1__NHID5__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch300__train_lr0.01__plot_data"
df = get_df(fn)
p1 = plot(df, "High expressivity")
fn = "N_part19__expt_nameGTstudy1__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch300__train_lr0.01__plot_data"
df = get_df(fn)
p2 = plot(df, "Low expressivity")
grid.arrange(p1, p2, nrow = 2)
g <- arrangeGrob(p1, p2, nrow = 2)
ggsave(file = "GT.pdf", g)
grid.arrange(p1, p2, nrow = 1)
g <- arrangeGrob(p1, p2, nrow = 2)
ggsave(file = "GT.pdf", g)
ggsave(file = "GT.pdf", g)
ggsave(file = "GT.png", g)
g <- arrangeGrob(p1, p2, nrow = 1)
ggsave(file = "GT.png", g)
image(strength_l, weight_l, model_llo)
true_llo = log(log_odds(data$hrms))
data <- fromJSON(txt=fn)
true_llo = log(log_odds(data$hrms))
model_llo = log(log_odds(data$ams))
strength_l = log(abs(data$strength))
weight_l = log(data$weight*33)
flag = rep(c(rep(TRUE, 300), rep(FALSE, 300)), 20)
model_lm0 <- lm(true_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
summary(model_lm0)
model_lm1 <- lm(model_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
summary(model_lm1)
model_lm_exact <- lm(model_llo[!flag] - log(log(0.6/0.4)) ~ strength_l[!flag] + weight_l[!flag] + 0)
summary(model_lm_exact)
model_lm_overall <- lm(model_llo[flag] - log(log(0.6/0.4)) ~ strength_l[flag] + weight_l[flag] + 0)
summary(model_lm_overall)
image(strength_l, weight_l, model_llo)
data <- fromJSON(txt=fn)
true_llo = log(log_odds(data$hrms))
model_llo = log(log_odds(data$ams))
strength_l = log(abs(data$strength))
weight_l = log(data$weight*33)
flag = rep(c(rep(TRUE, 300), rep(FALSE, 300)), 20)
model_lm0 <- lm(true_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
summary(model_lm0)
model_lm1 <- lm(model_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
summary(model_lm1)
model_lm_exact <- lm(model_llo[!flag] - log(log(0.6/0.4)) ~ strength_l[!flag] + weight_l[!flag] + 0)
summary(model_lm_exact)
model_lm_overall <- lm(model_llo[flag] - log(log(0.6/0.4)) ~ strength_l[flag] + weight_l[flag] + 0)
summary(model_lm_overall)
image(strength_l, weight_l, model_llo)
plot(strength_l, weight_l)
strength_l
plot(strength_l, weight_l)
plot(strength_l, weight_l, na.rm = TRUE)
weight_l
plot(strength_l, weight_l, na.rm = TRUE)
points(strength_l, weight_l, na.rm = TRUE)
points(strength_l, weight_l)
p1
library(jsonlite)
library(ggplot2)
require(gridExtra)
log_odds <- function(x){
return(log(x/(1.0 - x)))
}
setwd("~/GitHub/LearningToInfer/data")
fn = "N_part19__expt_nameGTstudy1__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch300__train_lr0.01__plot_data"
data <- fromJSON(txt=fn)
true_llo = log(log_odds(data$hrms))
model_llo = log(log_odds(data$ams))
strength_l = log(abs(data$strength))
weight_l = log(data$weight*33)
flag = rep(c(rep(TRUE, 300), rep(FALSE, 300)), 20)
model_lm0 <- lm(true_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
image(strength_l, weight_l, model_llo)
plot(strength_l, weight_l)
qplot(strength_l, weight_l)
qplot(strength_l[!flag], weight_l[!flag])
qplot(strength_l[flag], weight_l[flag], col = 'red')
qplot(strength_l[!flag], weight_l[!flag])
points(strength_l[flag], weight_l[flag], col = 'red')
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which)) +
geom_point()
df0 = data.frame(strength = strength_l,
weight = weight_l,
which = rep(c(rep('True', 300), rep('Random', 300)), 20))
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which)) +
geom_point()
p0
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which)) +
geom_point(position= 'dodge')
p0
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which)) +
geom_jitter()
p0
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which, alpha = 0.5)) +
geom_jitter()
p0
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which, alpha = 0.1)) +
geom_jitter()
p0
df0 = data.frame(strength = strength_l + 0.1*flag,
weight = weight_l,
which = rep(c(rep('True', 300), rep('Random', 300)), 20))
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which, alpha = 0.1)) +
geom_jitter()
p0
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which, alpha = 0.1)) +
geom_point()
p0
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which, alpha = 0.01)) +
geom_jitter()
p0
p0 <- ggplot(df0, aes(y=weight, x=strength, col=which, alpha = 0.001)) +
geom_jitter()
p0
model_lm_overall <- lm(model_llo[flag*flag2] - log(log(0.6/0.4)) ~ strength_l[flag*flag2] + weight_l[flag*flag2] + 0)
flag2 = strength_l > median(strength_l)
model_lm_overall <- lm(model_llo[flag*flag2] - log(log(0.6/0.4)) ~ strength_l[flag*flag2] + weight_l[flag*flag2] + 0)
summary(model_lm_overall)
flag2
flag2 = strength_l[flag] > median(strength_l)
flag2 = strength_l[flag] > median(strength_l)
model_lm_overall <- lm(model_llo[flag]*flag2 - log(log(0.6/0.4)) ~ strength_l[flag]*flag2 + weight_l[flag]*flag2 + 0)
summary(model_lm_overall)
flag2 = strength_l > median(strength_l[flag])
model_lm_overall <- lm(model_llo[flag*flag2] - log(log(0.6/0.4)) ~ strength_l[flag*flag2] + weight_l[flag*flag2] + 0)
summary(model_lm_overall)
strength_l[flag*flag2]
flag2 = strength_l < median(strength_l[flag])
model_lm_overall <- lm(model_llo[flag*flag2] - log(log(0.6/0.4)) ~ strength_l[flag*flag2] + weight_l[flag*flag2] + 0)
summary(model_lm_overall)
median(strength_l[flag])
strength_l[flag]
strength_l[flag2]
sum(flag*flag2)
flag[:10]
flag[1:10]
flag2[1:10]
flag2*flag
flag2*flag[1:10]
(flag2*flag)[1:10]
flag[1:10]
flag2[1:10]
strength_l[1:10]
flag2 = strength_l < median(strength_l[flag])
model_lm_overall <- lm(model_llo[flag*flag2] - log(log(0.6/0.4)) ~ strength_l[flag*flag2] + weight_l[flag*flag2] + 0)
summary(model_lm_overall)
temp_s = streng_l[flag]
model_lm_overall <- lm(temp_model[flag2] - log(log(0.6/0.4)) ~ temp_s[flag*flag2] + temp_w[flag*flag2] + 0)
temp_s = strength_l[flag]
temp_w = weight_l[flag]
temp_model = model_llo[flag]
flag2 = temp_s < median(temp_s)
model_lm_overall <- lm(temp_model[flag2] - log(log(0.6/0.4)) ~ temp_s[flag2] + temp_w[flag2] + 0)
summary(model_lm_overall)
model_lm <- lm(temp_model[flag2] - log(log(0.6/0.4)) ~ temp_s[flag2] + temp_w[flag2] + 0)
summary(model_lm)
model_lm0 <- lm(temp_model[!flag2] - log(log(0.6/0.4)) ~ temp_s[!flag2] + temp_w[!flag2] + 0)
summary(model_lm0)
hist(strength_l)
hist(strength_l[flag])
hist(strength_l[!flag])
hist(strength_l[flag], add = T)
hist(strength_l[!flag], col = 'red', alpha = 0.5)
hist(strength_l[!flag], col = 'red')
hist(strength_l[!flag], col = 'red')
hist(strength_l[flag], add = T, col = 'blue')
?hist
density(strength_l[!flag])
p <- density(strength_l[!flag])
plot(p)
qplot(p)
p0 <- ggplot(df0, aes(x=strength, col=which, alpha = 0.001)) +
geom_density()
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density()
p0
df0 = data.frame(strength = strength_l,
weight = weight_l,
which = rep(c(rep('True', 300), rep('Random', 300)), 20))
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density()
p0
p0 <- ggplot(df0, aes(x=weight, col=which)) +
geom_density()
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density()
p0
?geom_density
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 10)
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 1)
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 0.3)
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 0.4)
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 0.1)
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 0.4)
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 0.4)
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 0.2)
p0
p0 <- ggplot(df0, aes(x=strength, col=which)) +
geom_density(bw = 0.5)
p0
library(jsonlite)
library(ggplot2)
require(gridExtra)
log_odds <- function(x){
return(log(x/(1.0 - x)))
}
setwd("~/GitHub/LearningToInfer/data")
get_df <- function(fn){
data <- fromJSON(txt=fn)
true_llo = log(log_odds(data$hrms))
model_llo = log(log_odds(data$ams))
strength_l = log(abs(data$strength))
weight_l = log(data$weight*33)
exact = rep(c(rep(TRUE, 300), rep(FALSE, 300)), 20)
model_lm0 <- lm(true_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
summary(model_lm0)
model_lm1 <- lm(model_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
summary(model_lm1)
model_lm_exact <- lm(model_llo[!exact] - log(log(0.6/0.4)) ~ strength_l[!exact] + weight_l[!exact] + 0)
summary(model_lm_exact)
model_lm_overall <- lm(model_llo[exact] - log(log(0.6/0.4)) ~ strength_l[exact] + weight_l[exact] + 0)
summary(model_lm_overall)
df = data.frame(mu = c(summary(model_lm_exact)$coefficients[1:2],
summary(model_lm_overall)$coefficients[1:2]),
se = c(summary(model_lm_exact)$coefficients[2:3],
summary(model_lm_overall)$coefficients[2:3]),
cond = factor(c('Exact', 'Exact', 'Overall', 'Overall')),
which = factor(c('Strength', 'Weight', 'Strength', 'Weight'))
)
return(df)
}
plot<- function(df, title){
cbbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
limits <- aes(ymax = mu + se, ymin=mu - se)
p1 <- ggplot(df, aes(y=mu, x=which, fill=cond)) +
#bars
geom_bar(position="dodge", stat="identity")+
#0 to 1
#golden ratio error bars
# geom_errorbar(limits, position="dodge", width=0.31)+
# #point size
# geom_point(size=3)+
scale_fill_manual(values=cbbPalette[c(6,7)])+
#title
theme_classic() +xlab("Condition")+ylab("Mean Estimates")+
ggtitle(title)+
scale_y_continuous(limits = c(0,1), expand = c(0, 0)) +
#adjust text size
theme(text = element_text(size=18, family="serif"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=2))
return(p1)
}
fn = "N_part19__expt_nameGTstudy1__NHID5__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch300__train_lr0.01__plot_data"
df = get_df(fn)
p1 = plot(df, "High expressivity")
fn = "N_part19__expt_nameGTstudy1__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch300__train_lr0.01__plot_data"
df = get_df(fn)
p2 = plot(df, "Low expressivity")
grid.arrange(p1, p2, nrow = 1)
g <- arrangeGrob(p1, p2, nrow = 1)
ggsave(file = "GT.png", g)
# #************************************
# data <- fromJSON(txt=fn)
#
# true_llo = log(log_odds(data$hrms))
# model_llo = log(log_odds(data$ams))
# strength_l = log(abs(data$strength))
# weight_l = log(data$weight*33)
# exact = rep(c(rep(TRUE, 300), rep(FALSE, 300)), 20)
#
# df0 = data.frame(strength = strength_l,
#                  weight = weight_l,
#                  which = rep(c(rep('True', 300), rep('Random', 300)), 20))
#
# p0 <- ggplot(df0, aes(x=strength, col=which)) +
#   geom_density(bw = 0.5)
# p0
#
#
# temp_s = strength_l[exact]
# temp_w = weight_l[exact]
# temp_model = model_llo[exact]
# flag2 = temp_s < median(temp_s)
#
# model_lm <- lm(temp_model[flag2] - log(log(0.6/0.4)) ~ temp_s[flag2] + temp_w[flag2] + 0)
# summary(model_lm)
#
# model_lm0 <- lm(temp_model[!flag2] - log(log(0.6/0.4)) ~ temp_s[!flag2] + temp_w[!flag2] + 0)
# summary(model_lm0)
data <- fromJSON(txt=fn)
true_llo = log(log_odds(data$hrms))
plot(log_odds$ams, data$strength)
true_llo = log(log_odds(data$hrms))
model_llo = log(log_odds(data$ams))
strength_l = log(abs(data$strength))
weight_l = log(data$weight*33)
exact = rep(c(rep(TRUE, 300), rep(FALSE, 300)), 20)
df0 = data.frame(strength = strength_l,
weight = weight_l,
which = rep(c(rep('True', 300), rep('Random', 300)), 20))
p0 <- ggplot(df0, aes(x=strength, y = exp(model_llo), col=which)) +
geom_point()
p0
p0 <- ggplot(df0, aes(x=strength, y = exp(model_llo), col=which, alpha = 0.01)) +
geom_point()
p0
p0 <- ggplot(df0, aes(x=strength, y = exp(model_llo), col=which, alpha = 0.001)) +
geom_point()
p0
p0 <- ggplot(df0, aes(x=strength, y = model_llo, col=which, alpha = 0.001)) +
geom_point()
p0
p0 <- ggplot(df0, aes(x=strength, y = model_llo, col=which, alpha = 0.001)) +
geom_point()
p0
p0 <- ggplot(df0, aes(x=strength, y = true_llo, col=which, alpha = 0.001)) +
geom_point()
p0
model
model
p0 <- ggplot(df0, aes(x=strength, y = model_llo, col=which, alpha = 0.001)) +
geom_point()
p0
p0 <- ggplot(df0, aes(x=model_llo, col=which)) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x=true_llo, col=which)) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x=c(model_llo, true_llo), col=c(rep('model', 12000), rep('true', 12000)))) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x=true_llo, col=which)) +
geom_density(bw = 0.5)
c(model_llo, true_llo).shape
length(c(model_llo, true_llo))
p0 <- ggplot(aes(x=c(model_llo, true_llo), col=c(rep('model', 12000), rep('true', 12000)))) +
geom_density(bw = 0.5)
p0
df0 <- data.frame(x=c(model_llo, true_llo),
which=c(rep('model', 12000), rep('true', 12000)))
p0 <- ggplot(df0, aes(x = x, col = which)) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x = exp(x), col = which)) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x = x, col = which)) +
geom_density(bw = 0.5)
p0
df0 <- data.frame(x=c(model_llo[exact], true_llo[exact]),
which=c(rep('model', 6000), rep('true', 6000)))
p0 <- ggplot(df0, aes(x = x, col = which)) +
geom_density(bw = 0.5)
p0
df0 <- data.frame(x=c(model_llo[!exact], true_llo[!exact]),
which=c(rep('model', 6000), rep('true', 6000)))
p0 <- ggplot(df0, aes(x = x, col = which)) +
geom_density(bw = 0.5)
p0
df0 = data.frame(strength = strength_l,
weight = weight_l,
which = rep(c(rep('True', 300), rep('Random', 300)), 20))
p0 <- ggplot(df0, aes(x = x, col = which)) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x = strength_l, col = which)) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x = weight_l, col = which)) +
geom_density(bw = 0.5)
p0
p0 <- ggplot(df0, aes(x = strength_l, col = which)) +
geom_density(bw = 0.2)
p0
p0 <- ggplot(df0, aes(x = weight_l, col = which)) +
geom_density(bw = 0.2)
p0
var(weight_l)
var(strength_l)
Entropy(weight_l)
install.packages(entropy)
install.packages(entropy-package)
entropy(weight_l)
p0 <- ggplot(df0, aes(x = strength_l, col = which)) +
geom_density(bw = 0.2)
p0
p0 <- ggplot(df0, aes(x = weight_l, col = which)) +
geom_density(bw = 0.2)
p0
df0 <- data.frame(x=c(model_llo[exact], true_llo[exact]),
which=c(rep('model', 6000), rep('true', 6000)))
p0 <- ggplot(df0, aes(x = strength_l, col = which)) +
geom_density(bw = 0.4)
p0
p0 <- ggplot(df0, aes(x = weight_l, col = which)) +
geom_density(bw = 0.4)
p0
corr <-lm(true_llo[!exact] ~ strength_l[!exact])
library(jsonlite)
library(ggplot2)
require(gridExtra)
log_odds <- function(x){
return(log(x/(1.0 - x)))
}
setwd("~/GitHub/LearningToInfer/data")
get_df <- function(fn){
data <- fromJSON(txt=fn)
true_llo = log(log_odds(data$hrms))
model_llo = log(log_odds(data$ams))
strength_l = log(abs(data$strength))
weight_l = log(data$weight*33)
exact = rep(c(rep(TRUE, 300), rep(FALSE, 300)), 20)
model_lm0 <- lm(true_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
summary(model_lm0)
model_lm1 <- lm(model_llo - log(log(0.6/0.4)) ~ strength_l + weight_l + 0)
summary(model_lm1)
model_lm_exact <- lm(model_llo[!exact] - log(log(0.6/0.4)) ~ strength_l[!exact] + weight_l[!exact] + 0)
summary(model_lm_exact)
model_lm_overall <- lm(model_llo[exact] - log(log(0.6/0.4)) ~ strength_l[exact] + weight_l[exact] + 0)
summary(model_lm_overall)
df = data.frame(mu = c(summary(model_lm_exact)$coefficients[1:2],
summary(model_lm_overall)$coefficients[1:2]),
se = c(summary(model_lm_exact)$coefficients[2:3],
summary(model_lm_overall)$coefficients[2:3]),
cond = factor(c('Exact', 'Exact', 'Overall', 'Overall')),
which = factor(c('Strength', 'Weight', 'Strength', 'Weight'))
)
return(df)
}
plot<- function(df, title){
cbbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
limits <- aes(ymax = mu + se, ymin=mu - se)
p1 <- ggplot(df, aes(y=mu, x=which, fill=cond)) +
#bars
geom_bar(position="dodge", stat="identity")+
#0 to 1
#golden ratio error bars
# geom_errorbar(limits, position="dodge", width=0.31)+
# #point size
# geom_point(size=3)+
scale_fill_manual(values=cbbPalette[c(6,7)])+
#title
theme_classic() +xlab("Condition")+ylab("Mean Estimates")+
ggtitle(title)+
scale_y_continuous(limits = c(0,1), expand = c(0, 0)) +
#adjust text size
theme(text = element_text(size=18, family="serif"))+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill=NA, size=2))
return(p1)
}
fn = "N_part19__expt_nameGTstudy1__NHID5__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch300__train_lr0.01__plot_data"
fn = "N_part19__expt_nameGTstudy1__NHID1__NONLINrbf__L20.0__test_epoch0__test_lr0.0__train_epoch300__train_lr0.01__plot_data"
data <- fromJSON(txt=fn)
true_llo = log(log_odds(data$hrms))
model_llo = log(log_odds(data$ams))
strength_l = log(abs(data$strength))
weight_l = log(data$weight*33)
exact = rep(c(rep(TRUE, 300), rep(FALSE, 300)), 20)
df0 = data.frame(strength = strength_l,
weight = weight_l,
which = rep(c(rep('True', 300), rep('Random', 300)), 20))
corr <-lm(true_llo[!exact] ~ strength_l[!exact])
summary(corr)
corr <-lm(true_llo[!exact] ~ strength_l[!exact] + 0)
corr <-lm(true_llo[!exact] ~ strength_l[!exact] + 0)
summary(corr)
corr <-lm(true_llo[!exact] ~ weight_l[!exact] + 0)
summary(corr)
corr <-lm(true_llo[!exact] ~ strength_l[!exact])
